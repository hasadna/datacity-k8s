apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: cco-update-instance
spec:
  entrypoint: cco-update-instance
  arguments:
    parameters:
      - name: instance_name
        default: test
      - name: recreate_helm
        default: "false"
  templates:
    - name: cco-update-instance
      inputs:
        parameters:
          - name: instance_name
          - name: recreate_helm
      volumes:
        - name: service-account-key
          secret:
            secretName: cco-service-account-key
        - name: cco-dir
          emptyDir: {}
        - name: datacity-k8s
          emptyDir: {}
      initContainers:
        - name: cco-init
          image: datacity/ckan-cloud-operator
          imagePullPolicy: Always
          volumeMounts:
            - name: service-account-key
              mountPath: /mnt/service-account-key
            - name: cco-dir
              mountPath: /mnt/cco_dir
            - name: datacity-k8s
              mountPath: /mnt/datacity_k8s
          args:
            - -c
            - |
              cp /mnt/service-account-key/service_account_key.json /mnt/cco_dir &&\
              cd /mnt/datacity_k8s &&\
              curl -sLO https://github.com/hasadna/hasadna-k8s/archive/refs/heads/master.zip &&\
              unzip master.zip &&\
              mv hasadna-k8s-master/* ./
      container:
        image: datacity/ckan-cloud-operator
        imagePullPolicy: Always
        volumeMounts:
          - name: cco-dir
            mountPath: /root
          - name: datacity-k8s
            mountPath: /datacity-k8s
        args:
          - -c
          - |
            set -e
            cd /datacity-k8s
            gcloud auth activate-service-account --key-file=/root/service_account_key.json
            gcloud config set project datacity-k8s
            gcloud container clusters get-credentials datacity --zone europe-west1-d
            helm init -c
            INSTANCE_NAME="{{ "{{inputs.parameters.instance_name}}" }}"
            RECREATE_HELM="{{ "{{inputs.parameters.recreate_helm}}" }}"
            if ! [ -e "instances/${INSTANCE_NAME}/values.yaml" ]; then
              echo missing instance values
              exit 1
            fi
            if [ "${RECREATE_HELM}" = "true" ]; then
              INSTANCE_ID=$(ckan-cloud-operator ckan instance get ${INSTANCE_NAME} | grep '^id: ' | cut -d' ' -f2)
              echo INSTANCE_ID=$INSTANCE_ID
              echo deleting helm...
              helm --tiller-namespace ckan-cloud-provider-ckan-deployment-helm delete ckan-cloud-$INSTANCE_ID
              echo deleting helm configmaps...
              kubectl -n ckan-cloud-provider-ckan-deployment-helm delete configmap -l NAME=ckan-cloud-$INSTANCE_ID
              echo deleting ingresses...
              kubectl -n $INSTANCE_ID delete ingress --all
              echo OK
            fi
            ckan-cloud-operator ckan instance update ${INSTANCE_NAME} \
              --override-spec-file /datacity-k8s/instances/${INSTANCE_NAME}/values.yaml \
              --ckan-cloud-docker-latest-tag $(cat /datacity-k8s/instances/ckan-cloud-docker-latest-tag.txt) \
              --persist-overrides --wait-ready
